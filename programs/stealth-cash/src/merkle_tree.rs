use std::collections::HashMap;

use anchor_lang::prelude::borsh::{BorshDeserialize, BorshSerialize};

pub trait IHasher {
    #[allow(non_snake_case)]
    fn MiMcSponge(&self, in_xL: u128, in_xR: u128) -> (u128, u128);
}

pub struct Aa {
    i: u32
}

impl BorshDeserialize for Aa {
    fn deserialize(buf: &mut &[u8]) -> anchor_lang::prelude::borsh::maybestd::io::Result<Self> {
        todo!()
    }
    
    fn deserialize_reader<R: anchor_lang::prelude::borsh::maybestd::io::Read>(reader: &mut R) -> anchor_lang::prelude::borsh::maybestd::io::Result<Self> {
        todo!()
    }
}

pub struct MerkleTree {
    hasher: Box<dyn IHasher>,
    
    pub levels: u128,
    pub filled_subtrees: HashMap<u128, Vec<u8>>,
    pub roots: HashMap<u128, Vec<u8>>,
    pub current_root_index: u32,
    pub next_index: u32
}

impl MerkleTree {
    pub fn new(levels: u32, hasher: dyn IHasher) -> Self {
        let mut this = MerkleTree {
            hasher,
            levels,
            filled_subtrees: HashMap::new(),
            roots: HashMap::new(),
            current_root_index: 0,
            next_index: 0
        };

        for i in 0..this.levels {
            this.filled_subtrees.insert(i, zeros(i));
        }
    }
}

fn zeros(i: u128) -> Vec<u8> {
    match i {
        0 => vec![
            0x2f, 0xe5, 0x4c, 0x60, 0xd3, 0xac, 0xab, 0xf3, 0x34, 0x3a, 0x35, 0xb6, 0xeb, 0xa1, 0x5d,
            0xb4, 0x82, 0x1b, 0x34, 0x0f, 0x76, 0xe7, 0x41, 0xe2, 0x24, 0x96, 0x85, 0xed, 0x48, 0x99,
            0xaf, 0x6c,
        ],
        1 => vec![
            0x25, 0x6a, 0x61, 0x35, 0x77, 0x7e, 0xe2, 0xfd, 0x26, 0xf5, 0x4b, 0x8b, 0x70, 0x37, 0xa2,
            0x54, 0x39, 0xd5, 0x23, 0x5c, 0xae, 0xe2, 0x24, 0x15, 0x41, 0x86, 0xd2, 0xb8, 0xa5, 0x2e,
            0x31, 0xd,
        ],
        2 => vec![
            0x11, 0x51, 0x94, 0x98, 0x95, 0xe8, 0x2a, 0xb1, 0x99, 0x24, 0xde, 0x92, 0xc4, 0x0a, 0x3d,
            0x6f, 0x7b, 0xcb, 0x60, 0xd9, 0x2b, 0x00, 0x50, 0x4b, 0x81, 0x99, 0x61, 0x36, 0x83, 0xf0,
            0xc2, 0,
        ],
        3 => vec![
            0x20, 0x12, 0x1e, 0xe8, 0x11, 0x48, 0x9f, 0xf8, 0xd6, 0x1f, 0x09, 0xfb, 0x89, 0xe3, 0x13,
            0xf1, 0x49, 0x59, 0xa0, 0xf2, 0x8b, 0xb4, 0x28, 0xa2, 0xd, 0xba, 0x6b, 0x0b, 0x06, 0x8b,
            0x3b, 0xdb,
        ],
        4 => vec![
            0x0a, 0x89, 0xca, 0x6f, 0xfa, 0x14, 0xcc, 0x46, 0x2c, 0xfe, 0xdb, 0x84, 0x2c, 0x30, 0xed,
            0x22, 0x1a, 0x50, 0xa3, 0xd6, 0xbf, 0x02, 0x2a, 0x6a, 0x57, 0xdc, 0x82, 0xab, 0x24, 0xc1,
            0x57, 0xc9,
        ],
        5 => vec![
            0x24, 0xca, 0x05, 0xc2, 0xb5, 0xcd, 0x42, 0xe8, 0x90, 0xd6, 0xbe, 0x94, 0xc6, 0x8d, 0x06,
            0x89, 0xf4, 0xf2, 0x1c, 0x9c, 0xec, 0x9c, 0x0f, 0x13, 0xfe, 0x41, 0xd5, 0x66, 0xdf, 0xb5,
            0x49, 0x59,
        ],
        6 => vec![
            0x1c, 0xcb, 0x97, 0xc9, 0x32, 0x56, 0x5a, 0x92, 0xc6, 0x01, 0x56, 0xbd, 0xba, 0x2d, 0x08,
            0xf3, 0xbf, 0x13, 0x77, 0x46, 0x4e, 0x02, 0x5c, 0xee, 0x76, 0x56, 0x79, 0xe6, 0x04, 0xa7,
            0x31, 0x5c,
        ],
        7 => vec![
            0x19, 0x15, 0x6f, 0xbd, 0x7d, 0x1a, 0x8b, 0xf5, 0xcb, 0xa8, 0x90, 0x93, 0x67, 0xde, 0x1b,
            0x62, 0x45, 0x34, 0xeb, 0xab, 0x4f, 0x0f, 0x79, 0xe0, 0x03, 0xbc, 0xcd, 0xd1, 0xb1, 0x82,
            0xbd, 0xb4,
        ],
        8 => vec![
            0x26, 0x1a, 0xf8, 0xc1, 0xf0, 0x91, 0x2e, 0x46, 0x57, 0x44, 0x64, 0x14, 0x09, 0xf6, 0x22, 
            0xd4, 0x66, 0xc3, 0x92, 0x0a, 0xc6, 0xe5, 0xff, 0x37, 0xe3, 0x66, 0x04, 0xcb, 0x11, 0xdf,
            0xff, 0x80
        ],
        9 => vec![
            0x00, 0x58, 0x45, 0x97, 0x24, 0xff, 0x6c, 0xa5, 0xa1, 0x65, 0x2f, 0xcb, 0xc3, 0xe8, 0x2b,
            0x93, 0x89, 0x5c, 0xf0, 0x8e, 0x97, 0x5b, 0x19, 0xbe, 0xab, 0x3f, 0x54, 0xc2, 0x17, 0xd1,
            0xc0, 0x07,
        ],
        10 => vec![
            0x1f, 0x04, 0xef, 0x20, 0xde, 0xe4, 0x8d, 0x39, 0x98, 0x4d, 0x8e, 0xab, 0xe7, 0x68, 0xa7,
            0x0e, 0xaf, 0xa6, 0x31, 0x0a, 0xd2, 0x08, 0x49, 0xd4, 0x57, 0x3c, 0x3c, 0x40, 0xc2, 0xad,
            0x1e, 0x30,
        ],
        11 => vec![
            0x1b, 0xea, 0x3d, 0xec, 0x5d, 0xab, 0x51, 0x56, 0x7c, 0xe7, 0xe2, 0x00, 0xa3, 0x0f, 0x7b,
            0xa6, 0xd4, 0x27, 0x6a, 0xea, 0xa5, 0x3e, 0x26, 0x86, 0xf9, 0x62, 0xa4, 0x6c, 0x66, 0xd5,
            0x11, 0xe5,
        ],
        12 => vec![
            0x0e, 0xe0, 0xf9, 0x41, 0xe2, 0xda, 0x4b, 0x9e, 0x31, 0xc3, 0xca, 0x97, 0xa4, 0x0d, 0x8f,
            0xa9, 0xce, 0x68, 0xd9, 0x7c, 0x08, 0x41, 0x77, 0x07, 0x1b, 0x3c, 0xb4, 0x6c, 0xd3, 0x37,
            0x2f, 0x0f,
        ],
        13 => vec![
            0x1c, 0xa9, 0x50, 0x3e, 0x89, 0x35, 0x88, 0x45, 0x01, 0xbb, 0xaf, 0x20, 0xbe, 0x14, 0xeb,
            0x4c, 0x46, 0xb8, 0x97, 0x72, 0xc9, 0x7b, 0x96, 0xe3, 0xb2, 0xeb, 0xf3, 0xa3, 0x6a, 0x94,
            0x8b, 0xbd,
        ],
        14 => vec![
            0x13, 0x3a, 0x80, 0xe3, 0x06, 0x97, 0xcd, 0x55, 0xd8, 0xf7, 0xd4, 0xb0, 0x96, 0x5b, 0x7b,
            0xe2, 0x40, 0x57, 0xba, 0x5d, 0xc3, 0xda, 0x89, 0x8e, 0xe2, 0x18, 0x72, 0x32, 0x44, 0x6c,
            0xb1, 0x08,
        ],
        15 => vec![
            0x13, 0xe6, 0xd8, 0xfc, 0x88, 0x83, 0x9e, 0xd7, 0x6e, 0x18, 0x2c, 0x2a, 0x77, 0x9a, 0xf5,
            0xb2, 0xc0, 0xda, 0x9d, 0xd1, 0x8c, 0x90, 0x42, 0x7a, 0x64, 0x4f, 0x7e, 0x14, 0x8a, 0x62,
            0x53, 0xb6,
        ],
        16 => vec![
            0x1e, 0xb1, 0x6b, 0x05, 0x7a, 0x47, 0x7f, 0x4b, 0xc8, 0xf5, 0x72, 0xea, 0x6b, 0xee, 0x39,
            0x56, 0x10, 0x98, 0xf7, 0x8f, 0x15, 0xbf, 0xb3, 0x69, 0x9d, 0xcb, 0xb7, 0xbd, 0x8d, 0xb6,
            0x18, 0x54
        ],
        17 => vec![
            0x0d, 0xa2, 0xcb, 0x16, 0xa1, 0xce, 0xaa, 0xbf, 0x1c, 0x16, 0xb8, 0x38, 0xf7, 0xa9, 0xe3,
            0xf2, 0xa3, 0xa3, 0x08, 0x8d, 0x9e, 0x0a, 0x6d, 0xeb, 0xaa, 0x74, 0x81, 0x14, 0x62, 0x06,
            0x96, 0xea,
        ],
        18 => vec![
            0x24, 0xa3, 0xb3, 0xd8, 0x22, 0x42, 0x0b, 0x14, 0xb5, 0xd8, 0xcb, 0x6c, 0x28, 0xa5, 0x74,
            0xf0, 0x1e, 0x98, 0xea, 0x9e, 0x94, 0x05, 0x51, 0xd2, 0xeb, 0xd7, 0x5c, 0xee, 0x12, 0x64,
            0x9f, 0x9d,
        ],
        19 => vec![
            0x19, 0x86, 0x22, 0xac, 0xbd, 0x78, 0x3d, 0x1b, 0x0d, 0x90, 0x64, 0x10, 0x5b, 0x1f, 0xc8,
            0xe4, 0xd8, 0x88, 0x9d, 0xe9, 0x5c, 0x4c, 0x51, 0x9b, 0x3f, 0x63, 0x58, 0x09, 0xfe, 0x6a,
            0xfc, 0x05,
        ],
        20 => vec![
            0x29, 0xd7, 0xed, 0x39, 0x12, 0x56, 0xcc, 0xc3, 0xea, 0x59, 0x6c, 0x86, 0xe9, 0x33, 0xb8,
            0x9f, 0xf3, 0x39, 0xd2, 0x5e, 0xa8, 0xdd, 0xce, 0xd9, 0x75, 0xae, 0x2f, 0xe3, 0x0b, 0x52,
            0x96, 0xd4,
        ],
        21 => vec![
            0x19, 0xbe, 0x59, 0xf2, 0xf0, 0x41, 0x3c, 0xe7, 0x8c, 0x0c, 0x37, 0x03, 0xa3, 0xa5, 0x45,
            0x1b, 0x1d, 0x7f, 0x39, 0x62, 0x9f, 0xa3, 0x3a, 0xbd, 0x11, 0x54, 0x8a, 0x76, 0x06, 0x5b,
            0x29, 0x67,
        ],
        22 => vec![
            0x1f, 0xf3, 0xf6, 0x17, 0x97, 0xe5, 0x38, 0xb7, 0x0e, 0x61, 0x93, 0x10, 0xd3, 0x3f, 0x2a,
            0x06, 0x3e, 0x7e, 0xb5, 0x91, 0x04, 0xe1, 0x12, 0xe9, 0x57, 0x38, 0xda, 0x12, 0x54, 0xdc,
            0x34, 0x53,
        ],
        23 => vec![
            0x10, 0xc1, 0x6a, 0xe9, 0x95, 0x9c, 0xf8, 0x35, 0x89, 0x80, 0xd9, 0xdd, 0x96, 0x16, 0xe4,
            0x82, 0x28, 0x73, 0x73, 0x10, 0xa1, 0x0e, 0x2b, 0x6b, 0x73, 0x1c, 0x1a, 0x54, 0x8f, 0x03,
            0x6c, 0x48,
        ],
        24 => vec![
            0x0b, 0xa4, 0x33, 0xa6, 0x31, 0x74, 0xa9, 0x0a, 0xc2, 0x09, 0x92, 0xe7, 0x5e, 0x30, 0x95,
            0x49, 0x68, 0x12, 0xb6, 0x52, 0x68, 0x5b, 0x5e, 0x1a, 0x2e, 0xae, 0x0b, 0x1b, 0xf4, 0xe8,
            0xfc, 0xd1,
        ],
        25 => vec![
            0x01, 0x9d, 0xdb, 0x9d, 0xf2, 0xbc, 0x98, 0xd9, 0x87, 0xd0, 0xdf, 0xec, 0xa9, 0xd2, 0xb6,
            0x43, 0xde, 0xaf, 0xab, 0x8f, 0x70, 0x36, 0x56, 0x2e, 0x62, 0x7c, 0x36, 0x67, 0x26, 0x6a, 
            0x04, 0x4c
        ],
        26 => vec![
            0x2d, 0x3c, 0x88, 0xb2, 0x31, 0x75, 0xc5, 0xa5, 0x56, 0x5d, 0xb9, 0x28, 0x41, 0x4c, 0x66,
            0xd1, 0x91, 0x2b, 0x11, 0xac, 0xf9, 0x74, 0xb2, 0xe6, 0x44, 0xca, 0xaa, 0xc0, 0x47, 0x39,
            0xce, 0x99,
        ],
        27 => vec![
            0x2e, 0xab, 0x55, 0xf6, 0xae, 0x4e, 0x66, 0xe3, 0x2c, 0x51, 0x89, 0xee, 0xd5, 0xc4, 0x70,
            0x84, 0x08, 0x63, 0x44, 0x57, 0x60, 0xf5, 0xed, 0x7e, 0x7b, 0x69, 0xb2, 0xa6, 0x26, 0x00,
            0xf3, 0x54,
        ],
        28 => vec![
            0x00, 0x2d, 0xf3, 0x7a, 0x26, 0x42, 0x62, 0x18, 0x02, 0x38, 0x3c, 0xf9, 0x52, 0xbf, 0x4d,
            0xd1, 0xf3, 0x2e, 0x05, 0x43, 0x3b, 0xee, 0xb1, 0xfd, 0x41, 0x03, 0x1f, 0xb7, 0xea, 0xce,
            0x97, 0x9d,
        ],
        29 => vec![
            0x10, 0x4a, 0xeb, 0x41, 0x43, 0x5d, 0xb6, 0x6c, 0x3e, 0x62, 0xfe, 0xcc, 0xc1, 0xd6, 0xf5,
            0xd9, 0x8d, 0x0a, 0x0e, 0xd7, 0x5d, 0x13, 0x74, 0xdb, 0x45, 0x7c, 0xf4, 0x62, 0xe3, 0xa1,
            0xf4, 0x27,
        ],
        30 => vec![
            0x1f, 0x3c, 0x6f, 0xd8, 0x58, 0xe9, 0xa7, 0xd4, 0xb0, 0xd1, 0xf3, 0x8e, 0x25, 0x6a, 0x09,
            0xd8, 0x1d, 0x5a, 0x5e, 0x3c, 0x96, 0x39, 0x87, 0xe2, 0xd4, 0xb8, 0x14, 0xcf, 0xab, 0x7c,
            0x6e, 0xbb,
        ],
        31 => vec![
            0x2c, 0x7a, 0x07, 0xd2, 0x0d, 0xff, 0x79, 0xd0, 0x1f, 0xec, 0xed, 0xc1, 0x13, 0x34, 0x28,
            0x4a, 0x8d, 0x08, 0x43, 0x66, 0x06, 0xc9, 0x36, 0x93, 0xb6, 0x7e, 0x33, 0x3f, 0x67, 0x1b,
            0xf6, 0x9c,
        ],
        _ => panic!("Index out of bounds")
        }        
}